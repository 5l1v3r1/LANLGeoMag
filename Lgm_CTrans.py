"""
Lgm_CTrans module, this contains the necessary code for coordinate
transformations in Lgm

the ugly top part is
Generated by h2py from ../libLanlGeoMag/Lgm/Lgm_CTrans.h
@todo: go through and remove the bits we don't need

@author: Brian Larsen
@organization: LANL
@contact: balarsen@lanl.gov

@version: V1: 20-Dec-2010 (BAL)
"""


###############################################################################
###############################################################################
###############################################################################
def STRINGIFY(x): return #x

def EXPAND(x): return STRINGIFY(x)


# Included from stdio.h

# Included from _types.h

# Included from sys/_types.h

# Included from sys/cdefs.h
def __P(protos): return protos

def __STRING(x): return #x

def __P(protos): return ()

def __STRING(x): return "x"

def __attribute__(x): return

def __COPYRIGHT(s): return __IDSTRING(copyright,s)

def __RCSID(s): return __IDSTRING(rcsid,s)

def __SCCSID(s): return __IDSTRING(sccsid,s)

def __PROJECT_VERSION(s): return __IDSTRING(project_version,s)

__DARWIN_ONLY_64_BIT_INO_T = 0
__DARWIN_ONLY_VERS_1050 = 0
__DARWIN_ONLY_UNIX_CONFORMANCE = 1
__DARWIN_ONLY_UNIX_CONFORMANCE = 0
__DARWIN_UNIX03 = 1
__DARWIN_UNIX03 = 1
__DARWIN_UNIX03 = 0
__DARWIN_UNIX03 = 0
__DARWIN_UNIX03 = 1
__DARWIN_64_BIT_INO_T = 1
__DARWIN_64_BIT_INO_T = 0
__DARWIN_64_BIT_INO_T = 1
__DARWIN_64_BIT_INO_T = 0
__DARWIN_64_BIT_INO_T = 1
__DARWIN_VERS_1050 = 1
__DARWIN_VERS_1050 = 0
__DARWIN_VERS_1050 = 1
__DARWIN_NON_CANCELABLE = 0
__DARWIN_SUF_UNIX03 = "$UNIX2003"
__DARWIN_SUF_64_BIT_INO_T = "$INODE64"
__DARWIN_SUF_1050 = "$1050"
__DARWIN_SUF_NON_CANCELABLE = "$NOCANCEL"
__DARWIN_SUF_EXTSN = "$DARWIN_EXTSN"
def __DARWIN_10_6_AND_LATER_ALIAS(x): return

def __DARWIN_10_6_AND_LATER_ALIAS(x): return x

_POSIX_C_SOURCE = 199009L
_POSIX_C_SOURCE = 199209L
_POSIX_C_SOURCE = 200112L
_POSIX_C_SOURCE = 199506L
_POSIX_C_SOURCE = 198808L
def __DARWIN_LDBL_COMPAT(x): return

def __DARWIN_LDBL_COMPAT2(x): return

__DARWIN_LONG_DOUBLE_IS_DOUBLE = 1
__DARWIN_LONG_DOUBLE_IS_DOUBLE = 0
def __DARWIN_LDBL_COMPAT(x): return

def __DARWIN_LDBL_COMPAT2(x): return

__DARWIN_LONG_DOUBLE_IS_DOUBLE = 1
def __DARWIN_LDBL_COMPAT(x): return

def __DARWIN_LDBL_COMPAT2(x): return

__DARWIN_LONG_DOUBLE_IS_DOUBLE = 0
_DARWIN_FEATURE_64_BIT_INODE = 1
_DARWIN_FEATURE_LONG_DOUBLE_IS_DOUBLE = 1
_DARWIN_FEATURE_ONLY_64_BIT_INODE = 1
_DARWIN_FEATURE_ONLY_VERS_1050 = 1
_DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1
_DARWIN_FEATURE_UNIX_CONFORMANCE = 3

# Included from machine/_types.h
__PTHREAD_SIZE__ = 1168
__PTHREAD_ATTR_SIZE__ = 56
__PTHREAD_MUTEXATTR_SIZE__ = 8
__PTHREAD_MUTEX_SIZE__ = 56
__PTHREAD_CONDATTR_SIZE__ = 8
__PTHREAD_COND_SIZE__ = 40
__PTHREAD_ONCE_SIZE__ = 8
__PTHREAD_RWLOCK_SIZE__ = 192
__PTHREAD_RWLOCKATTR_SIZE__ = 16
__PTHREAD_SIZE__ = 596
__PTHREAD_ATTR_SIZE__ = 36
__PTHREAD_MUTEXATTR_SIZE__ = 8
__PTHREAD_MUTEX_SIZE__ = 40
__PTHREAD_CONDATTR_SIZE__ = 4
__PTHREAD_COND_SIZE__ = 24
__PTHREAD_ONCE_SIZE__ = 4
__PTHREAD_RWLOCK_SIZE__ = 124
__PTHREAD_RWLOCKATTR_SIZE__ = 12
__DARWIN_NULL = (0L)
__DARWIN_NULL = 0
def __strftimelike(fmtarg): return \

__DARWIN_WCHAR_MAX = 0x7fffffff
__DARWIN_WCHAR_MIN = (-0x7fffffff - 1)
__DARWIN_WCHAR_MIN = 0
_FORTIFY_SOURCE = 0
_FORTIFY_SOURCE = 2
NULL = __DARWIN_NULL
__SLBF = 0x0001
__SNBF = 0x0002
__SRD = 0x0004
__SWR = 0x0008
__SRW = 0x0010
__SEOF = 0x0020
__SERR = 0x0040
__SMBF = 0x0080
__SAPP = 0x0100
__SSTR = 0x0200
__SOPT = 0x0400
__SNPT = 0x0800
__SOFF = 0x1000
__SMOD = 0x2000
__SALC = 0x4000
__SIGN = 0x8000
_IOFBF = 0
_IOLBF = 1
_IONBF = 2
BUFSIZ = 1024
EOF = (-1)
FOPEN_MAX = 20
FILENAME_MAX = 1024
P_tmpdir = "/var/tmp/"
L_tmpnam = 1024
TMP_MAX = 308915776
SEEK_SET = 0
SEEK_CUR = 1
SEEK_END = 2
L_ctermid = 1024
def feof_unlocked(p): return __sfeof(p)

def ferror_unlocked(p): return __sferror(p)

def clearerr_unlocked(p): return __sclearerr(p)

def fileno_unlocked(p): return __sfileno(p)

def getc_unlocked(fp): return __sgetc(fp)

def putchar_unlocked(x): return putc_unlocked(x, stdout)


# Included from xlocale/_stdio.h

# Included from secure/_stdio.h

# Included from secure/_common.h
_USE_FORTIFY_LEVEL = 2
_USE_FORTIFY_LEVEL = 1
_USE_FORTIFY_LEVEL = 0
def __darwin_obsz0(object): return __builtin_object_size (object, 0)

def __darwin_obsz(object): return __builtin_object_size (object, _USE_FORTIFY_LEVEL > 1)


# Included from stdlib.h

# Included from Availability.h
__MAC_10_0 = 1000
__MAC_10_1 = 1010
__MAC_10_2 = 1020
__MAC_10_3 = 1030
__MAC_10_4 = 1040
__MAC_10_5 = 1050
__MAC_10_6 = 1060
__MAC_NA = 9999
__IPHONE_2_0 = 20000
__IPHONE_2_1 = 20100
__IPHONE_2_2 = 20200
__IPHONE_3_0 = 30000
__IPHONE_NA = 99999

# Included from AvailabilityInternal.h
__IPHONE_OS_VERSION_MAX_ALLOWED = __IPHONE_3_0
__IPHONE_OS_VERSION_MIN_REQUIRED = __IPHONE_2_0
__MAC_OS_X_VERSION_MAX_ALLOWED = __MAC_10_6

# Included from sys/wait.h

# Included from sys/signal.h

# Included from sys/appleapiopts.h
__DARWIN_NSIG = 32
NSIG = __DARWIN_NSIG

# Included from machine/signal.h
SIGHUP = 1
SIGINT = 2
SIGQUIT = 3
SIGILL = 4
SIGTRAP = 5
SIGABRT = 6
SIGPOLL = 7
SIGIOT = SIGABRT
SIGEMT = 7
SIGFPE = 8
SIGKILL = 9
SIGBUS = 10
SIGSEGV = 11
SIGSYS = 12
SIGPIPE = 13
SIGALRM = 14
SIGTERM = 15
SIGURG = 16
SIGSTOP = 17
SIGTSTP = 18
SIGCONT = 19
SIGCHLD = 20
SIGTTIN = 21
SIGTTOU = 22
SIGIO = 23
SIGXCPU = 24
SIGXFSZ = 25
SIGVTALRM = 26
SIGPROF = 27
SIGWINCH = 28
SIGINFO = 29
SIGUSR1 = 30
SIGUSR2 = 31

# Included from sys/_structs.h

# Included from machine/_structs.h
__DARWIN_FD_SETSIZE = 1024
__DARWIN_NBBY = 8
def __DARWIN_FD_ZERO(p): return __builtin_bzero(p, sizeof(*(p)))

def __DARWIN_FD_ZERO(p): return bzero(p, sizeof(*(p)))

SIGEV_NONE = 0
SIGEV_SIGNAL = 1
SIGEV_THREAD = 3
ILL_NOOP = 0
ILL_ILLOPC = 1
ILL_ILLTRP = 2
ILL_PRVOPC = 3
ILL_ILLOPN = 4
ILL_ILLADR = 5
ILL_PRVREG = 6
ILL_COPROC = 7
ILL_BADSTK = 8
FPE_NOOP = 0
FPE_FLTDIV = 1
FPE_FLTOVF = 2
FPE_FLTUND = 3
FPE_FLTRES = 4
FPE_FLTINV = 5
FPE_FLTSUB = 6
FPE_INTDIV = 7
FPE_INTOVF = 8
SEGV_NOOP = 0
SEGV_MAPERR = 1
SEGV_ACCERR = 2
BUS_NOOP = 0
BUS_ADRALN = 1
BUS_ADRERR = 2
BUS_OBJERR = 3
TRAP_BRKPT = 1
TRAP_TRACE = 2
CLD_NOOP = 0
CLD_EXITED = 1
CLD_KILLED = 2
CLD_DUMPED = 3
CLD_TRAPPED = 4
CLD_STOPPED = 5
CLD_CONTINUED = 6
POLL_IN = 1
POLL_OUT = 2
POLL_MSG = 3
POLL_ERR = 4
POLL_PRI = 5
POLL_HUP = 6
SA_ONSTACK = 0x0001
SA_RESTART = 0x0002
SA_RESETHAND = 0x0004
SA_NOCLDSTOP = 0x0008
SA_NODEFER = 0x0010
SA_NOCLDWAIT = 0x0020
SA_SIGINFO = 0x0040
SA_USERTRAMP = 0x0100
SA_64REGSET = 0x0200
SA_USERSPACE_MASK = (SA_ONSTACK | SA_RESTART | SA_RESETHAND | SA_NOCLDSTOP | SA_NODEFER | SA_NOCLDWAIT | SA_SIGINFO)
SIG_BLOCK = 1
SIG_UNBLOCK = 2
SIG_SETMASK = 3
SI_USER = 0x10001
SI_QUEUE = 0x10002
SI_TIMER = 0x10003
SI_ASYNCIO = 0x10004
SI_MESGQ = 0x10005
SS_ONSTACK = 0x0001
SS_DISABLE = 0x0004
MINSIGSTKSZ = 32768
SIGSTKSZ = 131072
SV_ONSTACK = SA_ONSTACK
SV_INTERRUPT = SA_RESTART
SV_RESETHAND = SA_RESETHAND
SV_NODEFER = SA_NODEFER
SV_NOCLDSTOP = SA_NOCLDSTOP
SV_SIGINFO = SA_SIGINFO
def sigmask(m): return (1 << ((m)-1))


# Included from sys/resource.h
PRIO_PROCESS = 0
PRIO_PGRP = 1
PRIO_USER = 2
PRIO_DARWIN_THREAD = 3
PRIO_MIN = -20
PRIO_MAX = 20
PRIO_DARWIN_BG = 0x1000
RUSAGE_SELF = 0
RUSAGE_CHILDREN = -1
RLIMIT_CPU = 0
RLIMIT_FSIZE = 1
RLIMIT_DATA = 2
RLIMIT_STACK = 3
RLIMIT_CORE = 4
RLIMIT_AS = 5
RLIMIT_RSS = RLIMIT_AS
RLIMIT_MEMLOCK = 6
RLIMIT_NPROC = 7
RLIMIT_NOFILE = 8
RLIM_NLIMITS = 9
_RLIMIT_POSIX_FLAG = 0x1000
IOPOL_TYPE_DISK = 0
IOPOL_SCOPE_PROCESS = 0
IOPOL_SCOPE_THREAD = 1
IOPOL_DEFAULT = 0
IOPOL_NORMAL = 1
IOPOL_PASSIVE = 2
IOPOL_THROTTLE = 3
WNOHANG = 0x00000001
WUNTRACED = 0x00000002
def _W_INT(i): return (i)

WCOREFLAG = 0200
def _WSTATUS(x): return (_W_INT(x) & 0177)

_WSTOPPED = 0177
def WEXITSTATUS(x): return ((_W_INT(x) >> 8) & 0x000000ff)

def WEXITSTATUS(x): return (_W_INT(x) >> 8)

def WSTOPSIG(x): return (_W_INT(x) >> 8)

def WIFEXITED(x): return (_WSTATUS(x) == 0)

def WTERMSIG(x): return (_WSTATUS(x))

def WCOREDUMP(x): return (_W_INT(x) & WCOREFLAG)

def W_STOPCODE(sig): return ((sig) << 8 | _WSTOPPED)

WEXITED = 0x00000004
WSTOPPED = 0x00000008
WCONTINUED = 0x00000010
WNOWAIT = 0x00000020
WAIT_ANY = (-1)
WAIT_MYPGRP = 0

# Included from machine/endian.h
WSTOPPED = _WSTOPPED

# Included from alloca.h
def alloca(size): return __alloca(size)

def __alloca(size): return __builtin_alloca(size)

NULL = __DARWIN_NULL
EXIT_FAILURE = 1
EXIT_SUCCESS = 0
RAND_MAX = 0x7fffffff

# Included from _xlocale.h
def MB_CUR_MAX_L(x): return (___mb_cur_max_l(x))

def MB_CUR_MAX_L(x): return (___mb_cur_max_l(x))


# Included from machine/types.h

# Included from xlocale/_stdlib.h

# Included from string.h
NULL = __DARWIN_NULL

# Included from xlocale/_string.h

# Included from secure/_string.h

# Included from math.h
DegPerRad = 57.295779513082320876798154814105
RadPerDeg = 0.017453292519943295769236907568
RadPerArcSec = 4.848136811095359935899141023579e-6
M_SQRTPI = 1.772453850905516027298167483341
M_SQRTPI_2 = 0.886226925452758013649083741671
M_1_SQRTPI = 0.564189583547756286948079451561
M_2PI = 6.283185307179586476925286766559
M_OneThird = 0.333333333333333333333333333333
FALSE = 0
TRUE = 1
Re = 6378.137
AU = 149.5978700e6
LGM_GOLD = 1.61803398874989484820
LGM_1O_GOLD = 0.61803398874989484820
LGM_1M_1O_GOLD = 0.38196601125010515180
LGM_ERROR = -1
LGM_FILL_VALUE = (-1e31)
LGM_JD_J2000 = 2451545.0
LGM_JD_GPS0 = 2444245.0
LGM_JD_TAI0 = 2436205.0
LGM_TIME_SYS_UTC = 0
LGM_TIME_SYS_TAI = 1
LGM_TIME_SYS_GPS = 2
LGM_TIME_SYS_TT = 3
LGM_TIME_SYS_TDB = 4
LGM_TIME_SYS_UT1 = 5
EME2000_COORDS = 1
ICRF2000_COORDS = 1
GEI2000_COORDS = 1
MOD_COORDS = 2
TOD_COORDS = 3
TEME_COORDS = 4
PEF_COORDS = 5
WGS84_COORDS = 6
IRTF_COORDS = 6
GEO_COORDS = 6
GSE_COORDS = 7
GSM_COORDS = 8
SM_COORDS = 9
EDMAG_COORDS = 10
CDMAG_COORDS = 11
EME2000_TO_EME2000 = 101
EME2000_TO_ICRF2000 = 101
EME2000_TO_GEI2000 = 101
EME2000_TO_MOD = 102
EME2000_TO_TOD = 103
EME2000_TO_TEME = 104
EME2000_TO_PEF = 105
EME2000_TO_WGS84 = 106
EME2000_TO_ITRF = 106
EME2000_TO_GEO = 106
EME2000_TO_GSE = 107
EME2000_TO_GSM = 108
EME2000_TO_SM = 109
EME2000_TO_EDMAG = 110
EME2000_TO_CDMAG = 111
ICRF2000_TO_EME2000 = 101
ICRF2000_TO_ICRF2000 = 101
ICRF2000_TO_GEI2000 = 101
ICRF2000_TO_MOD = 102
ICRF2000_TO_TOD = 103
ICRF2000_TO_TEME = 104
ICRF2000_TO_PEF = 105
ICRF2000_TO_WGS84 = 106
ICRF2000_TO_ITRF = 106
ICRF2000_TO_GEO = 106
ICRF2000_TO_GSE = 107
ICRF2000_TO_GSM = 108
ICRF2000_TO_SM = 109
ICRF2000_TO_EDMAG = 110
ICRF2000_TO_CDMAG = 111
GEI2000_TO_EME2000 = 101
GEI2000_TO_ICRF2000 = 101
GEI2000_TO_GEI2000 = 101
GEI2000_TO_MOD = 102
GEI2000_TO_TOD = 103
GEI2000_TO_TEME = 104
GEI2000_TO_PEF = 105
GEI2000_TO_WGS84 = 106
GEI2000_TO_ITRF = 106
GEI2000_TO_GEO = 106
GEI2000_TO_GSE = 107
GEI2000_TO_GSM = 108
GEI2000_TO_SM = 109
GEI2000_TO_EDMAG = 110
GEI2000_TO_CDMAG = 111
MOD_TO_EME2000 = 201
MOD_TO_ICRF2000 = 201
MOD_TO_GEI2000 = 201
MOD_TO_MOD = 202
MOD_TO_TOD = 203
MOD_TO_TEME = 204
MOD_TO_PEF = 205
MOD_TO_WGS84 = 206
MOD_TO_ITRF = 206
MOD_TO_GEO = 206
MOD_TO_GSE = 207
MOD_TO_GSM = 208
MOD_TO_SM = 209
MOD_TO_EDMAG = 210
MOD_TO_CDMAG = 211
TOD_TO_EME2000 = 301
TOD_TO_ICRF2000 = 301
TOD_TO_GEI2000 = 301
TOD_TO_MOD = 302
TOD_TO_TOD = 303
TOD_TO_TEME = 304
TOD_TO_PEF = 305
TOD_TO_WGS84 = 306
TOD_TO_ITRF = 306
TOD_TO_GEO = 306
TOD_TO_GSE = 307
TOD_TO_GSM = 308
TOD_TO_SM = 309
TOD_TO_EDMAG = 310
TOD_TO_CDMAG = 311
TEME_TO_EME2000 = 401
TEME_TO_ICRF2000 = 401
TEME_TO_GEI2000 = 401
TEME_TO_MOD = 402
TEME_TO_TOD = 403
TEME_TO_TEME = 404
TEME_TO_PEF = 405
TEME_TO_WGS84 = 406
TEME_TO_ITRF = 406
TEME_TO_GEO = 406
TEME_TO_GSE = 407
TEME_TO_GSM = 408
TEME_TO_SM = 409
TEME_TO_EDMAG = 410
TEME_TO_CDMAG = 411
PEF_TO_EME2000 = 501
PEF_TO_ICRF2000 = 501
PEF_TO_GEI2000 = 501
PEF_TO_MOD = 502
PEF_TO_TOD = 503
PEF_TO_TEME = 504
PEF_TO_PEF = 505
PEF_TO_WGS84 = 506
PEF_TO_ITRF = 506
PEF_TO_GEO = 506
PEF_TO_GSE = 507
PEF_TO_GSM = 508
PEF_TO_SM = 509
PEF_TO_EDMAG = 510
PEF_TO_CDMAG = 511
WGS84_TO_EME2000 = 601
WGS84_TO_ICRF2000 = 601
WGS84_TO_GEI2000 = 601
WGS84_TO_MOD = 602
WGS84_TO_TOD = 603
WGS84_TO_TEME = 604
WGS84_TO_PEF = 605
WGS84_TO_WGS84 = 606
WGS84_TO_ITRF = 606
WGS84_TO_GEO = 606
WGS84_TO_GSE = 607
WGS84_TO_GSM = 608
WGS84_TO_SM = 609
WGS84_TO_EDMAG = 610
WGS84_TO_CDMAG = 611
ITRF_TO_EME2000 = 601
ITRF_TO_ICRF2000 = 601
ITRF_TO_GEI2000 = 601
ITRF_TO_MOD = 602
ITRF_TO_TOD = 603
ITRF_TO_TEME = 604
ITRF_TO_PEF = 605
ITRF_TO_WGS84 = 606
ITRF_TO_ITRF = 606
ITRF_TO_GEO = 606
ITRF_TO_GSE = 607
ITRF_TO_GSM = 608
ITRF_TO_SM = 609
ITRF_TO_EDMAG = 610
ITRF_TO_CDMAG = 611
GEO_TO_EME2000 = 601
GEO_TO_ICRF2000 = 601
GEO_TO_GEI2000 = 601
GEO_TO_MOD = 602
GEO_TO_TOD = 603
GEO_TO_TEME = 604
GEO_TO_PEF = 605
GEO_TO_WGS84 = 606
GEO_TO_ITRF = 606
GEO_TO_GEO = 606
GEO_TO_GSE = 607
GEO_TO_GSM = 608
GEO_TO_SM = 609
GEO_TO_EDMAG = 610
GEO_TO_CDMAG = 611
GSE_TO_EME2000 = 701
GSE_TO_ICRF2000 = 701
GSE_TO_GEI2000 = 701
GSE_TO_MOD = 702
GSE_TO_TOD = 703
GSE_TO_TEME = 704
GSE_TO_PEF = 705
GSE_TO_WGS84 = 706
GSE_TO_ITRF = 706
GSE_TO_GEO = 706
GSE_TO_GSE = 707
GSE_TO_GSM = 708
GSE_TO_SM = 709
GSE_TO_EDMAG = 710
GSE_TO_CDMAG = 711
GSM_TO_EME2000 = 801
GSM_TO_ICRF2000 = 801
GSM_TO_GEI2000 = 801
GSM_TO_MOD = 802
GSM_TO_TOD = 803
GSM_TO_TEME = 804
GSM_TO_PEF = 805
GSM_TO_WGS84 = 806
GSM_TO_ITRF = 806
GSM_TO_GEO = 806
GSM_TO_GSE = 807
GSM_TO_GSM = 808
GSM_TO_SM = 809
GSM_TO_EDMAG = 810
GSM_TO_CDMAG = 811
SM_TO_EME2000 = 901
SM_TO_ICRF2000 = 901
SM_TO_GEI2000 = 901
SM_TO_MOD = 902
SM_TO_TOD = 903
SM_TO_TEME = 904
SM_TO_PEF = 905
SM_TO_WGS84 = 906
SM_TO_ITRF = 906
SM_TO_GEO = 906
SM_TO_GSE = 907
SM_TO_GSM = 908
SM_TO_SM = 909
SM_TO_EDMAG = 910
SM_TO_CDMAG = 911
EDMAG_TO_EME2000 = 1001
EDMAG_TO_ICRF2000 = 1001
EDMAG_TO_GEI2000 = 1001
EDMAG_TO_MOD = 1002
EDMAG_TO_TOD = 1003
EDMAG_TO_TEME = 1004
EDMAG_TO_PEF = 1005
EDMAG_TO_WGS84 = 1006
EDMAG_TO_ITRF = 1006
EDMAG_TO_GEO = 1006
EDMAG_TO_GSE = 1007
EDMAG_TO_GSM = 1008
EDMAG_TO_SM = 1009
EDMAG_TO_EDMAG = 1010
EDMAG_TO_CDMAG = 1011
CDMAG_TO_EME2000 = 1101
CDMAG_TO_ICRF2000 = 1101
CDMAG_TO_GEI2000 = 1101
CDMAG_TO_MOD = 1102
CDMAG_TO_TOD = 1103
CDMAG_TO_TEME = 1104
CDMAG_TO_PEF = 1105
CDMAG_TO_WGS84 = 1106
CDMAG_TO_ITRF = 1106
CDMAG_TO_GEO = 1106
CDMAG_TO_GSE = 1107
CDMAG_TO_GSM = 1108
CDMAG_TO_SM = 1109
CDMAG_TO_EDMAG = 1110
CDMAG_TO_CDMAG = 1111

###############################################################################
###############################################################################
###############################################################################

from Lgm_Types import *
from Lgm_Vector import *
from Lgm_LeapSeconds import *
import ctypes

class Lgm_DateTime(ctypes.Structure):
    _fields_ = [ ("Date", LgmLong ), # In basic ISO format (YYYYMMDD or YYYYDDD) Represented as a single long int
        ("Year", LgmInt), #  4-digit year
        ("Month", LgmInt), # [1-12]
        ("Day", LgmInt), # Day Of Month [1-31]
        ("Doy", LgmInt), # Day Of Year [1-31]
        ("Time", LgmDouble), # Decimal value of time in hours
        ("Hour", LgmInt), # Hours [0-23]
        ("Minute", LgmInt), # Minutes [0-59]
        ("Second", LgmDouble), # Seconds [0-60] (the 60 accommodates leap seconds)
        ("Week", LgmInt), # ISO Week number [1-53]
        ("wYear", LgmInt), #  ISO Year associated with the ISO Week Number (can be different from Year)
        ("Dow", LgmInt), # ISO Day Of Week number [1-7]
        ("DowStr", LgmChar*10), # ISO Day Of Week number [1-7]
        ("fYear", LgmDouble), # Decimal year (e.g. 2004.2345)
        ("JD", LgmDouble), # Julian Date
        ("T", LgmDouble), # Julian Centuries since J2000 for this time system
        ("DaySeconds", LgmDouble), # Number of seconds in the day.
        ("TZD_sgn", LgmInt), # Sign of Time zone offset
        ("TZD_hh", LgmInt), # Time zone offset hours
        ("TZD_mm", LgmInt), # Time zone offset minutes
        ("TimeSystem", LgmInt) ] # e.g. LGM_UTC, LGM_UT1, LGM_TAI, LGM_GPS, LGM_TT, LGM_TDB, LGM_TCG, etc..
Lgm_DateTimeP = ctypes.POINTER(Lgm_DateTime)


class Lgm_CTrans(ctypes.Structure):
    _fields_ = [ ("Verbose", LgmInt),
        ("l", Lgm_LeapSeconds), # Structure containing Leap Second Info
        ("UT1", Lgm_DateTime), # UT is the mean solar time at Greenwich.
                                     # UT0 is a version of UT that uses data
                                     # from many different ground stations.
                                     # UT1 is a version of UT0 in which
                                     # corrections for polar motion have been
                                     # made so that time is independant of
                                     # observing location. There is also a UT2,
                                     # but we wont use UT0 or UT2 here.
                                     # Units: Decimal hours
        ("UTC", Lgm_DateTime), # Universal Time Coordinated.
                                     # Most commonly used time system. Derived
                                     # from atomic time. It is maintained to be
                                     # within +/- 0.9s of UT1 (via addition or
                                     # subtraction(?) of leap seconds).
                                     # Units: Decimal hours
        ("DUT1", LgmDouble), # Difference between UT1 and UTC.
                                     #      DUT1 = UT1 - UTC.
                                     # This is monitored and reported as part
                                     # of the Earth Orientation Parameters
                                     # (EOP). Can be predicted a short time
                                     # into the future, but definitive values
                                     # only available retrospectively.  We set
                                     # this value to 0.0 by default. Thus in
                                     # the absence of EOP data, we assume its
                                     # initial value.
                                     # Units: Decimal seconds
        ("LOD", LgmDouble), # Length Of Day (LOD). Its the amount of extra
                                     # time in seconds that the current day has. Not
                                     # predictable. Part of EOP values.
        ("TAI", Lgm_DateTime), # International Atomic Time.
                                      #     TAI = UTC + DAT
        ("GPS", Lgm_DateTime), # GPS time
                                      #     GPS = TAI - 19s
        ("DAT", LgmDouble), # Difference between UTC and TAI.
                                      #     DAT = TAI - UTC
                                      # DAT is essentially the number of leap seconds
                                      # and are an integral number of whole seconds.
                                      # Units: Decimal seconds.
        ("TT", Lgm_DateTime), # Terestrial Time (TT).
                                      # Essentially the same thing as
                                      # "Terrestrial Dynamical Time (TDT) or
                                      # Ephmeris Time (ET). Its defined to be,
                                      #      TT = TAI + 32.184s
                                      # Units: Decimal hours.
        ("TDB", Lgm_DateTime), # Barycentric Dynamical Time.
                                      # Not used here.
                                      # Units: Decimal hours
        ("TCG", Lgm_DateTime), # Geocentric Coordinate Time.
                                      # Not used here.
                                      # Units: Decimal hours
        ("gmst", LgmDouble), # Greenwich Mean Sidereal Time
                                      # units: in radians
        ("gast", LgmDouble), # Greenwich Apparent Sidereal Time
                                      # Units: in radians
        ("xp", LgmDouble), #  Pole wander parameters.
                                      # part of EOP data.
                                      # Units: radians
        ("yp", LgmDouble ), # Pole wander parameters.
                                      # part of EOP data.
                                      # Units: radians
        ("epsilon", LgmDouble ), # Mean Obliquity of the Ecliptic
                                     # (in radians)
        ("epsilon_true", LgmDouble ), # True Obliquity of the Ecliptic
                                     #  \f$\epsilon_{true} = \epsilon + dEps\f$
                                     # (in radians)
        ("eccentricity", LgmDouble ), # Eccentricity of Earth-Sun orbit
        ("lambda_sun", LgmDouble ), #  Ecliptic Long. of Sun (in radians)
        ("earth_sun_dist", LgmDouble ), #  Earth-Sun distance (in units of earth radii)
        ("RA_sun", LgmDouble ), #  Right Ascention of Sun (in degrees)
        ("DEC_sun", LgmDouble ), # Declination of Sun (in degrees)
        ("lambda_sun_ha", LgmDouble ), # high accuracy eccliptic coords of sun
        ("r_sun_ha", LgmDouble ), # high accuracy eccliptic coords of sun
        ("beta_sun_ha", LgmDouble ), # high accuracy eccliptic coords of sun
        ("RA_sun_ha", LgmDouble ), # high accuracy Right Ascention of Sun (in degrees)
        ("DEC_sun_ha", LgmDouble ), # high accuracy Declination of Sun (in degrees)
        ("Sun", Lgm_Vector), # direction of Sun in GEI system (unit vector)
        ("EcPole", Lgm_Vector), # direction of Ecliptic Pole in GEI system (unit vector)
        ("psi", LgmDouble), # Geodipole tilt angle, \f$\psi\f$ (in radians)
        ("sin_psi", LgmDouble), # \f$\sin(\psi)\f$
        ("cos_psi", LgmDouble), # \f$\cos(\psi)\f$
        ("tan_psi", LgmDouble), # \f$\tan(\psi)\f$
        ("RA_moon", LgmDouble), # Right Ascention of Moon (in degrees)
        ("DEC_moon", LgmDouble), # Declination of Moon (in degrees)
        ("MoonPhase", LgmDouble), # The Phase of the Moon (in days)
        ("EarthMoonDistance", LgmDouble), # Distance between the Earth and Moon (in earth-radii)
     #  The following are various important parameters derived from
     #  the IGRF field. Note that these are the basis for defining
     #  Mag coord systems. That's why they are here and not somewhere else...
        ("M_cd", LgmDouble), # centered  dipole Magnetic moment. (nT Re^3)
        ("M_cd_McIllwain", LgmDouble), # magnetic dipole moment used by McIllwain to compute L. Sometimes want to use this for consistency?
        ("CD_gcolat", LgmDouble), #  Geographic colat of centered dipole axis (deg.)
        ("CD_glon", LgmDouble), # Geographic long. of centered dipole axis (deg.)
        ("ED_x0", LgmDouble), # x-comp of dipole displacement from center. Used in eccentric dipole field.
        ("ED_y0", LgmDouble), # y-comp of dipole displacement from center. Used in eccentric dipole field.
        ("ED_z0", LgmDouble), # z-comp of dipole displacement from center. Used in eccentric dipole field.
        ("Zeta", LgmDouble), # Precession angle, \f$\zeta\f$
        ("Theta", LgmDouble), # Precession angle, \f$\theta\f$
        ("Zee", LgmDouble), # Precession angle, \f$z\f$
        ("nNutationTerms", LgmInt), # number of terms to usek in the dPsi/dEps Nutation series.
        ("dPsi", LgmDouble), #
        ("dEps", LgmDouble), #
        ("dPsiCosEps", LgmDouble), #
        ("dPsiSinEps", LgmDouble), #
        ("ddPsi", LgmDouble), # radians additional corrections to dPsi -- part of EOP data
        ("ddEps", LgmDouble), # radians additional corrections to dEps -- part of EOP data
        ("EQ_Eq", LgmDouble), # Equation of the equinoxes.
        ("OmegaMoon", LgmDouble), # Ascending node of Moon.
        ("dX", LgmDouble), #  for IUA-2000A reduction (not used yet)
        ("dY", LgmDouble), # for IUA-2000A reduction (not used yet)
        # Transformation matrices between various ccord systems
        ("Agei_to_mod", LgmDouble * 3 * 3), #
        ("Amod_to_gei", LgmDouble * 3 * 3), #
        ("Amod_to_tod", LgmDouble * 3 * 3), #
        ("Atod_to_mod", LgmDouble * 3 * 3), #
        ("Ateme_to_pef", LgmDouble * 3 * 3), #
        ("Apef_to_teme", LgmDouble * 3 * 3), #
        ("Apef_to_tod", LgmDouble * 3 * 3), #
        ("Atod_to_pef", LgmDouble * 3 * 3), #
        ("Awgs84_to_pef", LgmDouble * 3 * 3), #
        ("Apef_to_wgs84", LgmDouble * 3 * 3), #
        ("Agse_to_mod", LgmDouble * 3 * 3), #
        ("Amod_to_gse", LgmDouble * 3 * 3), #
        ("Asm_to_gsm", LgmDouble * 3 * 3), #
        ("Agsm_to_sm", LgmDouble * 3 * 3), #
        ("Agsm_to_mod", LgmDouble * 3 * 3), #
        ("Amod_to_gsm", LgmDouble * 3 * 3), #
        ("Agsm_to_gse", LgmDouble * 3 * 3), #
        ("Agse_to_gsm", LgmDouble * 3 * 3), #
        ("Awgs84_to_mod", LgmDouble * 3 * 3), #
        ("Amod_to_wgs84", LgmDouble * 3 * 3), #
        ("Awgs84_to_gei", LgmDouble * 3 * 3), #
        ("Agei_to_wgs84", LgmDouble * 3 * 3), #
        ("Agsm_to_wgs84", LgmDouble * 3 * 3), #
        ("Awgs84_to_gsm", LgmDouble * 3 * 3), #
        ("Awgs84_to_cdmag", LgmDouble * 3 * 3), #
        ("Acdmag_to_wgs84", LgmDouble * 3 * 3), #
        ("Agei_to_mod", LgmDouble * 3 * 3), #
        ("Amod_to_gei", LgmDouble * 3 * 3), #
        ("Amod_to_tod", LgmDouble * 3 * 3), #
        ("Atod_to_mod", LgmDouble * 3 * 3), #
        ("Ateme_to_pef", LgmDouble * 3 * 3), #
        ("Apef_to_teme", LgmDouble * 3 * 3), #
        ("Apef_to_tod", LgmDouble * 3 * 3), #
        ("Atod_to_pef", LgmDouble * 3 * 3), #
        ("Awgs84_to_pef", LgmDouble * 3 * 3), #
        ("Apef_to_wgs84", LgmDouble * 3 * 3), #
        ("Agse_to_mod", LgmDouble * 3 * 3), #
        ("Amod_to_gse", LgmDouble * 3 * 3), #
        ("Asm_to_gsm", LgmDouble * 3 * 3), #
        ("Agsm_to_sm", LgmDouble * 3 * 3), #
        ("Agsm_to_mod", LgmDouble * 3 * 3), #
        ("Amod_to_gsm", LgmDouble * 3 * 3), #
        ("Agsm_to_gse", LgmDouble * 3 * 3), #
        ("Agse_to_gsm", LgmDouble * 3 * 3), #
        ("Awgs84_to_mod", LgmDouble * 3 * 3), #
        ("Amod_to_wgs84", LgmDouble * 3 * 3), #
        ("Awgs84_to_gei", LgmDouble * 3 * 3), #
        ("Agei_to_wgs84", LgmDouble * 3 * 3), #
        ("Agsm_to_wgs84", LgmDouble * 3 * 3), #
        ("Awgs84_to_gsm", LgmDouble * 3 * 3), #
        ("Awgs84_to_cdmag", LgmDouble * 3 * 3), #
        ("Acdmag_to_wgs84", LgmDouble * 3 * 3), #
        # These variables are needed to make IGRF Calls reentrant/thread-safe.
        ("Lgm_IGRF_FirstCall", LgmInt), #
        ("Lgm_IGRF_OldYear", LgmDouble), #
        ("Lgm_IGRF_g", LgmDouble * 13 * 13), #
        ("Lgm_IGRF_h", LgmDouble * 13 * 13), #
        ("Lgm_IGRF_R", LgmDouble * 13 * 13), #
        ("Lgm_IGRF_K", LgmDouble * 13 * 13), #
        ("Lgm_IGRF_S", LgmDouble * 13 * 13), #
        ("Lgm_IGRF_TwoNm1_Over_NmM", LgmDouble * 13 * 13), #
        ("Lgm_IGRF_NpMm1_Over_NmM", LgmDouble * 13 * 13), #
        ("Lgm_IGRF_SqrtNM1", LgmDouble * 13 * 13), #
        ("Lgm_IGRF_SqrtNM2", LgmDouble * 13 * 13) ]  #
Lgm_CTransP = ctypes.POINTER(Lgm_CTrans)


#class Lgm_DateTime(ctypes.Structure):
#    _fields_ = [ ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ),
#        ("", ) ]
